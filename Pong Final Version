import sys, pygame, os, time

# Force static position of screen
os.environ['SDL_VIDEO_CENTERED'] = '1'

# to get rid of sound lag
pygame.mixer.pre_init(44100, -16, 8, 2048)

# Runs imported module
pygame.init()

# Constants
UP = 'up'
DOWN = 'down'
BOOSTSP = 12
NORMSP = 8

WIN_W = 920
WIN_H = 570
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)

PADDLE_HEIGHT = 570
BALL_WIDTH = BALL_HEIGHT = 20


class Entity(pygame.sprite.Sprite):
   def __init__(self):
       pygame.sprite.Sprite.__init__(self)


class Paddle(Entity):
   def __init__(self, x, y):
       Entity.__init__(self)
       self.x = x
       self.y = y
       self.speed = 15
       self.pWidth = 20
       self.score = 0
       self.pHeight = PADDLE_HEIGHT
       self.lp_moveUP = self.lp_moveDOWN = self.rp_moveUP = self.rp_moveDOWN = False
       self.image = pygame.image.load("image/paddle.png").convert_alpha()
       self.image = pygame.transform.scale(self.image, (self.pWidth, self.pHeight))

   def update(self, down, up):
       # Adjust speed
       if up or down or up or down:
           if up:
               self.y -= 10
           if down:
               self.y += 10
       # paddle movement
       if self.y < 0:
           self.y = 0
       if self.y > WIN_H - self.pHeight:
           self.y = WIN_H - self.pHeight

class Paddle_flipped(Entity):
   def __init__(self, x, y):
       Entity.__init__(self)
       self.x = x
       self.y = y
       self.speed = 15
       self.pWidth = 75
       self.score = 0
       self.pHeight = 20
       self.tp_moveRIGHT = self.tp_moveLEFT = self.bp_moveRIGHT = self.bp_moveLEFT = False
       self.image = pygame.image.load("image/paddle_flipped.png").convert_alpha()
       self.image = pygame.transform.scale(self.image, (self.pWidth, self.pHeight))

   def update_horizontal(self, left, right):
       if right or left or right or left:
           if right:
               self.x += 10
           if left:
               self.x -= 10
       if self.x < 0:
           self.x = 0
       if self.x > WIN_W - self.pWidth:
           self.x = WIN_W - self.pWidth

class Ball(Entity):
   def __init__(self, x, y):
       Entity.__init__(self)
       self.speed = [-2, -2]
       self.ball = pygame.image.load("image/ball.png").convert_alpha()
       self.ball = pygame.transform.scale(self.ball, (BALL_WIDTH, BALL_HEIGHT))
       self.rect = self.ball.get_rect()
       self.rect = self.rect.move(x, y)

   def restart(self, lPaddle, rPaddle, screen):
       time.sleep(2)
       self.rect.y = WIN_H / 2 - (BALL_HEIGHT / 2)
       self.rect.x = WIN_W / 2
       self.speed = [-2, -2]
       lPaddle.y = (WIN_H / 2) - (PADDLE_HEIGHT / 2)
       rPaddle.y = (WIN_H / 2) - (PADDLE_HEIGHT / 2)

       return True

   def update(self, lPaddle, rPaddle, tPaddle, bPaddle):
       # If ball hits the top or bottom
       if self.rect.top < 0 or self.rect.top > WIN_H - BALL_HEIGHT:
           self.speed[1] = -self.speed[1]
           # print (playSound(sound["bop"], 1))

           # If ball hits paddle
       if (self.speed[0] < 0):
           if (self.rect.left > lPaddle.x + lPaddle.pWidth - 15 and self.rect.left < lPaddle.x + lPaddle.pWidth - 10) and (
                   self.rect.top > lPaddle.y and self.rect.top < (lPaddle.y + lPaddle.pHeight)):
               self.speed[0] = -self.speed[0]
               self.speed[0] = self.speed[0] + 0.5
               if self.speed[1] < 0:
                   self.speed[1] = self.speed[1] - 0.5
               else:
                   self.speed[1] = self.speed[1] + 0.5
               print(self.speed)
               # print (playSound(sound["beep"], 1))
       else:
           if (self.rect.left > rPaddle.x - 15 and self.rect.left < rPaddle.x - 5) and (
                   self.rect.top > rPaddle.y and self.rect.top < (rPaddle.y + rPaddle.pHeight)):
               self.speed[0] = -self.speed[0]
               self.speed[0] = self.speed[0] - 0.5
               if self.speed[1] < 0:
                   self.speed[1] = self.speed[1] - 0.5
               else:
                   self.speed[1] = self.speed[1] + 0.5
               print(self.speed)
               # print (playSound(sound["beep"], 1))

       if self.speed[1] < 0:
           if (self.rect.top > bPaddle.y + 20 and self.rect.top < bPaddle.y - 15) and (
                   self.rect.left > bPaddle.x and self.rect.left < (bPaddle.x + bPaddle.pWidth)):
               print("hit")
               self.speed[1] = -self.speed[1]
               self.speed[1] = self.speed[1] - 0.5
               if self.speed[0] < 0:
                   self.speed[0] = self.speed[0] - 0.5
               else:
                   self.speed[0] = self.speed[0] + 0.5
               print(self.speed)
               #print (playSound(sound["beep"], 1))
       else:
           if (self.rect.top < (tPaddle.y + 30) and self.rect.top > tPaddle.y - 5) and (
                   self.rect.left > (tPaddle.x - 10) and self.rect.left < tPaddle.x + 85):
               print("hit")
               self.speed[1] = -self.speed[1]
               self.speed[1] = self.speed[1] - 0.5
               if self.speed[0] < 0:
                   self.speed[0] = self.speed[0] - 0.5
               else:
                   self.speed[0] = self.speed[0] + 0.5
               print(self.speed)
               #print (playSound(sound["beep"], 1))

       self.rect = self.rect.move(self.speed)


# Returns True for .5 seconds, then False for .5 seconds.
def checkTime(cur, beg):
   return (cur - beg) % 1000 < 500


# Takes in string, (x, y) and size. Returns text and rect.
def txtRect(sen, xpos, ypos, size):
   phrase = pygame.font.Font(None, size)
   phrase = phrase.render(sen, 1, GREEN)
   phraseRect = phrase.get_rect()
   phraseRect.x = xpos
   phraseRect.y = ypos

   return phrase, phraseRect


# Loads sound files
def playSound(sound, volume):
   sound.set_volume(volume)
   return sound.play()


# Loads sound files
# def loadSound():
#   sound = {}
#   sound["beep"] = pygame.mixer.Sound("sound/beep.ogg")
#   sound["boom"] = pygame.mixer.Sound("sound/boom.ogg")
#   sound["bop"] = pygame.mixer.Sound("sound/bop.ogg")
#   sound["choose"] = pygame.mixer.Sound("sound/choose.ogg")
#   sound["count"] = pygame.mixer.Sound("sound/count.ogg")
#   sound["end"] = pygame.mixer.Sound("sound/end.ogg")
#   sound["music"] = pygame.mixer.Sound("sound/music.ogg")
#   sound["select"] = pygame.mixer.Sound("sound/select.ogg")

#   return sound


def main():
   size = WIN_W, WIN_H
   fps = 120

   # Used for count down
   countDown = 3
   decrement = True

   pygame.display.set_caption('Pong')
   screen = pygame.display.set_mode(size, pygame.SRCALPHA)

   # Create our objects
   ball = Ball((WIN_W / 2) - (BALL_WIDTH / 2), WIN_H / 2 - (BALL_HEIGHT / 2))
   lPaddle = Paddle(WIN_W / 15, (WIN_H / 2) - (PADDLE_HEIGHT / 2))
   rPaddle = Paddle(WIN_W / 1.1, (WIN_H / 2) - (PADDLE_HEIGHT / 2))
   tPaddle = Paddle_flipped((WIN_W/2) - 39,WIN_H-70)
   bPaddle = Paddle_flipped((WIN_W/2) - 39,70)
   intro_back = pygame.image.load("image/introBackground.jpg").convert()
   intro_back = pygame.transform.scale(intro_back, (WIN_W, WIN_H))

   # Create sound objects
   # sound = loadSound()

   clock = pygame.time.Clock()

   beg_time = pygame.time.get_ticks()
   intro = count = play = outro = True
   lp_moveUP = lp_moveDOWN = rp_moveDOWN = rp_moveUP = False
   tp_moveRIGHT = tp_moveLEFT = bp_moveRIGHT = bp_moveLEFT = False

   while intro:
       # Print background
       screen.fill(WHITE)
       screen.blit(intro_back, (0, 0))
       # Title Text: Pong
       text = txtRect("Pong", 0, 0, 200)
       text = txtRect("Pong", WIN_W / 2 - (text[1].width / 2), WIN_H / 4, 200)
       screen.blit(text[0], text[1])

       # Blinking Text: Click here to start
       text = txtRect("- Click here to start -", 0, 0, 50)
       text = txtRect("- Click here to start -", WIN_W / 2 - (text[1].width / 2), WIN_H / 1.7, 50)
       if checkTime(beg_time, pygame.time.get_ticks()):
           screen.blit(text[0], text[1])

       # Checks if window exit button pressed
       for event in pygame.event.get():
           if event.type == pygame.QUIT:
               sys.exit()
           elif event.type == pygame.MOUSEBUTTONDOWN or pygame.key.get_pressed()[pygame.K_RETURN] != 0:
               screen.blit(text[0], text[1])
               pygame.display.flip()
               # playSound(sound["select"], .3)
               pygame.time.wait(1500)
               intro = False

       # Limits frames per iteration of while loop
       clock.tick(fps)
       # Writes to main surface
       pygame.display.flip()

   # Gameplay
   while play:
       # Print background
       screen.fill(BLACK)
       #game_back = pygame.image.load("image/background.jpg").convert()
       #game_back = pygame.transform.scale(game_back, (WIN_W, WIN_H))
       #screen.blit(game_back, (0, 0))
       screen.blit(lPaddle.image, (lPaddle.x, lPaddle.y))
       screen.blit(rPaddle.image, (rPaddle.x, rPaddle.y))
       screen.blit(tPaddle.image, (tPaddle.x, tPaddle.y))
       screen.blit(bPaddle.image, (bPaddle.x, bPaddle.y))
       screen.blit(ball.ball, ball.rect)

       # Print Score
       sen = "Player 1 score: " + str(lPaddle.score)
       text = txtRect(sen, WIN_W / 50, 35, 40)
       screen.blit(text[0], text[1])

       sen = "Player 2 score: " + str(tPaddle.score)
       text = txtRect(sen, WIN_W - WIN_W / 50 - text[1].width, 35, 40)
       screen.blit(text[0], text[1])

       sen = "Player 3 score: " + str(rPaddle.score)
       text = txtRect(sen, WIN_W - WIN_W / 50 - text[1].width, WIN_H - 55, 40)
       screen.blit(text[0], text[1])

       sen = "Player 4 score: " + str(bPaddle.score)
       text = txtRect(sen, WIN_W / 50, WIN_H - 55, 40)
       screen.blit(text[0], text[1])
       # Countdown
       if count:
           text = txtRect(str(countDown), 0, 0, 75)
           text = txtRect(str(countDown), WIN_W / 3.5 - (text[1].width / 2), WIN_H / 4, 75)
           screen.blit(text[0], text[1])
           text = txtRect(str(countDown), WIN_W / 1.4 - (text[1].width / 2), WIN_H / 4, 75)
           screen.blit(text[0], text[1])

           # Writes to main surface
           pygame.display.flip()

           # playSound(sound["count"], 1)
           time.sleep(1)
           countDown -= 1

           # bug fix: prevent display of 0.
           if countDown == 0:
               count = False

       # Gameplay
       else:
           # Checks if window exit button pressed
           for event in pygame.event.get():
               if event.type == pygame.QUIT:
                   sys.exit()
               # Keyboard mechanics
               elif event.type == pygame.KEYDOWN:
                   if event.key == pygame.K_ESCAPE:
                       pygame.quit()
                       sys.exit()
                   if event.key == pygame.K_UP:
                       rp_moveUP = True
                       rp_moveDOWN = False
                   elif event.key == pygame.K_DOWN:
                       rp_moveUP = False
                       rp_moveDOWN = True
                   if event.key == pygame.K_w:
                       lp_moveUP = True
                       lp_moveDOWN = False
                   elif event.key == pygame.K_s:
                       lp_moveUP = False
                       lp_moveDOWN = True
                   if event.key == pygame.K_RIGHT:
                       tp_moveRIGHT = True
                       tp_moveLEFT = False
                   elif event.key == pygame.K_LEFT:
                       tp_moveRIGHT = False
                       tp_moveLEFT = True
                   if event.key == pygame.K_d:
                       bp_moveRIGHT = True
                       bp_moveLEFT = False
                   elif event.key == pygame.K_a:
                       bp_moveRIGHT = False
                       bp_moveLEFT = True
               elif event.type == pygame.KEYUP:
                   if event.key == pygame.K_UP:
                       rp_moveUP = False
                   elif event.key == pygame.K_DOWN:
                       rp_moveDOWN = False
                   if event.key == pygame.K_w:
                       lp_moveUP = False
                   elif event.key == pygame.K_s:
                       lp_moveDOWN = False
                   if event.key == pygame.K_RIGHT:
                       tp_moveRIGHT = False
                   elif event.key == pygame.K_LEFT:
                       tp_moveLEFT = False
                   if event.key == pygame.K_d:
                       bp_moveRIGHT = False
                   elif event.key == pygame.K_a:
                       bp_moveLEFT = False


           lPaddle.update(lp_moveDOWN, lp_moveUP)
           rPaddle.update(rp_moveDOWN, rp_moveUP)
           tPaddle.update_horizontal(tp_moveLEFT, tp_moveRIGHT)
           bPaddle.update_horizontal(bp_moveLEFT, bp_moveRIGHT)
           ball.update(lPaddle, rPaddle, tPaddle, bPaddle)
           # If ball moves off the screen
           if ball.rect.left < 0 - ball.rect.width or ball.rect.left > WIN_W + ball.rect.width:
               if ball.rect.left < 0:
                   rPaddle.score += 1
               elif ball.rect.left > WIN_H + ball.rect.width:
                   lPaddle.score += 1
               # playSound(sound["end"], 1)
               count = ball.restart(lPaddle, rPaddle, screen)
               countDown = 3
           lPaddle.speed = [-2, -2]
           rPaddle.speed = [-2, -2]
       # Game ends
       if lPaddle.score == 3 or rPaddle.score == 3:
           # playSound(sound["boom"], 1)
           break

       # Limits frames per iteration of while loop
       clock.tick(fps)
       # Writes to main surface
       pygame.display.flip()

   # Gameplay
   while outro:
       # Print background
       screen.fill(WHITE)
       end_back = pygame.image.load("image/end.jpg").convert()
       end_back = pygame.transform.scale(end_back, (WIN_W, WIN_H))
       screen.blit(end_back, (0, 0))
       # End Text: Player wins
       if lPaddle.score == 3 or rPaddle.score == 3:
           if lPaddle.score == 3:
               sen = "Player 1 Wins!"
           else:
               sen = "Player 2 Wins!"

           text = txtRect(sen, 0, 0, 40)
           text = txtRect(sen, WIN_W / 2 - (text[1].width / 2) - 130, WIN_H / 4, 100)

       screen.blit(text[0], text[1])

       text = txtRect("- Click here to continue -", 0, 0, 50)
       text = txtRect("- Click here to continue -", WIN_W / 2 - (text[1].width / 2), WIN_H / 1.7, 50)
       # Blinking Text: Click here to start
       if checkTime(beg_time, pygame.time.get_ticks()):
           screen.blit(text[0], text[1])

       # Checks if window exit button pressed
       for event in pygame.event.get():
           if event.type == pygame.QUIT:
               sys.exit()
           elif event.type == pygame.MOUSEBUTTONDOWN or pygame.key.get_pressed()[pygame.K_RETURN] != 0:
               screen.blit(text[0], (WIN_W / 2 - (text[1].width / 2), WIN_H / 1.7))
               pygame.display.flip()
               # loadSound("choose", 1)
               pygame.time.wait(1500)
               outro = False
               main()

       # Limits frames per iteration of while loop
       clock.tick(fps)
       # Writes to main surface
       pygame.display.flip()


if __name__ == "__main__":
   main()
