import sys, pygame, os, time, random, math

pygame.init()

WIN_W = 1200
WIN_H = 670

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

SHIP_HEIGHT = WIN_H / 120
#SHIP_HEIGHT = SHIP_WIDTH = WIN_W / 120
SHIP_WIDTH = WIN_W / 2

PILL_WIDTH = 7
PILL_HEIGHT = 25
YELLOW = (255, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)


class Text(pygame.sprite.Sprite):
   def __init__(self, size, color, position, font):
       pygame.sprite.Sprite.__init__(self)
       self.color = color
       self.position = position
       self.font = pygame.font.Font(font, size)

   def _update(self, ship_density):
       text = "mass: " + str(ship_density)
       self.image = self.font.render(str(text), 1, self.color)
       self.rect = self.image.get_rect()
       self.rect.move_ip(self.position[0] - self.rect.width / 2, self.position[1])


class LeftScore(Text):
   def __init__(self, size, color, position, f=None):
       super(LeftScore, self).__init__(size, color, position, font=f)

   def update(self, left_density, right_density):
       self._update(left_density)


class RightScore(Text):
   def __init__(self, size, color, position, f=None):
       super(RightScore, self).__init__(size, color, position, font=f)

   def update(self, left_density, right_density):
       self._update(right_density)


def set_color(density):
   color = (random.randrange(1, 255, 1), random.randrange(1, 255, 1), random.randrange(1, 255, 1))
   # print(color)
   if density == 1:
       return color
       # return YELLOW
   if density == 2:
       return color
       # return RED
   if density == 3:
       return color
       # return BLUE
   if density == 4:
       return color
       # return BLACK


class Ship(pygame.sprite.Sprite):
   def __init__(self, x, y, player):
       pygame.sprite.Sprite.__init__(self)
       self.width = SHIP_WIDTH
       self.height = SHIP_HEIGHT
       self.player = player
       self.speed = 10
       self.image = pygame.Surface((SHIP_WIDTH, SHIP_HEIGHT)).convert()
       self.rect = pygame.Rect(x, y, SHIP_WIDTH, SHIP_HEIGHT)
       self.density = 0
       self.round = 0

   def grow(self):
       self.height = self.width = (((5*math.sqrt(self.density))) + WIN_W / 100)
       self.image = pygame.transform.scale(self.image, (int(self.width), int(self.height)))

   def update(self, pill_group):
       key = pygame.key.get_pressed()

       if self.player == 'left':
           if key[pygame.K_w]:
               self.rect.y -= self.speed
           if key[pygame.K_s]:
               self.rect.y += self.speed
           if key[pygame.K_d]:
               self.rect.x += self.speed
           if key[pygame.K_a]:
               self.rect.x -= self.speed

       if self.player == 'right':
           if key[pygame.K_UP]:
               self.rect.y -= self.speed
           if key[pygame.K_DOWN]:
               self.rect.y += self.speed
           if key[pygame.K_RIGHT]:
               self.rect.x += self.speed
           if key[pygame.K_LEFT]:
               self.rect.x -= self.speed

       if self.rect.y < WIN_H / 15:
           self.rect.y = WIN_H / 15

       if self.rect.y > WIN_H - self.height:
           self.rect.y = WIN_H - self.height

       if self.player == 'left':
           if self.rect.x < 0:
               self.rect.x = 0
           if self.rect.x > WIN_W / 2 - self.width:
               self.rect.x = WIN_W / 2 - self.width

       if self.player == 'right':
           if self.rect.x > WIN_W - self.width:
               self.rect.x = WIN_W - self.width
           if self.rect.x < WIN_W / 2:
               self.rect.x = WIN_W / 2

       self.grow()
       collisions = pygame.sprite.spritecollide(self, pill_group, True)

       for key in collisions:
           self.density += key.density
           self.grow()
           # print(key.density, self.density)




class Pill(pygame.sprite.Sprite):
   def __init__(self, xval, density):
       pygame.sprite.Sprite.__init__(self)
       self.speed = random.randrange(1 , 4 , 1)
       self.image = pygame.Surface((PILL_WIDTH, PILL_HEIGHT)).convert()
       self.rect = pygame.Rect(xval, WIN_H / 15, PILL_WIDTH, PILL_HEIGHT)
       self.image.fill(set_color(density))
       self.density = density

   def update(self):
       self.rect.y += self.speed


def gen_random():
   xval_density = []
   for _ in range(3000):
       xval_density.append((
           random.randrange(0, (WIN_W / 2) - PILL_WIDTH), int(random.choice('1111111111111111111122222334'))))
   return xval_density


def checkTime(cur, beg):
   return (cur - beg) % 1000 < 500


def txtRect(sen, xpos, ypos, size):
   phrase = pygame.font.Font(None, size)
   phrase = phrase.render(sen, 1, BLACK)
   phraseRect = phrase.get_rect()
   phraseRect.x = xpos
   phraseRect.y = ypos

   return phrase, phraseRect

def restart(ship_right,ship_left,ship_group,pill_group,screen):
   ship_right.density = 1
   ship_left.density = 1
   ship_left.image = pygame.transform.scale(ship_left.image, (int(SHIP_WIDTH), int(SHIP_HEIGHT)))
   ship_right.image = pygame.transform.scale(ship_right.image, (int(SHIP_WIDTH), int(SHIP_HEIGHT)))
   ship_right.rect.x = WIN_W / 8
   ship_left.rect.x = WIN_W - WIN_W/8
   ship_right.rect.y = WIN_H - 2 * ship_left.width
   ship_left.rect.y = WIN_H - 2 * ship_right.width
   ship_group.update(pill_group)
   ship_group.draw(screen)
   time.sleep(2)

def main():
   intro = play = outro = True
   size = WIN_W, WIN_H
   screen = pygame.display.set_mode(size, pygame.SRCALPHA)

   xval_density = gen_random()
   max_pill_count = len(xval_density)
   # print(xval_density)

   pill_count = 0
   TIMER = 0

   ship_left = Ship((WIN_W / 4) - (SHIP_WIDTH / 2), WIN_H - (SHIP_HEIGHT * 4), 'left')
   ship_right = Ship((WIN_W / 4) + (SHIP_WIDTH / 2), WIN_H - (SHIP_HEIGHT * 4), 'right')
   vert_partition = pygame.Surface((1, WIN_H))
   vert_partition_1 = pygame.Surface((WIN_W, 1))
   left_score = LeftScore(40, BLACK, (WIN_W / 5, 10))
   right_score = RightScore(40, BLACK, (WIN_W / 1.25, 10))

   ship_group = pygame.sprite.Group()
   ship_group.add(ship_left)
   ship_group.add(ship_right)

   pill_group = pygame.sprite.Group()

   score_group = pygame.sprite.Group()
   score_group.add(left_score, right_score)

   clock = pygame.time.Clock()
   beg_time = pygame.time.get_ticks()

   while intro:
       screen.fill(WHITE)
       text = txtRect("Density", 0, 0, 150)
       text = txtRect("Density", WIN_W / 2 - (text[1].width / 2), WIN_H / 4, 150)
       screen.blit(text[0], text[1])
       text = txtRect("- Press Enter to Start -", 0, 0, 50)
       text = txtRect("- Press Enter to Start -", WIN_W / 2 - (text[1].width / 2), WIN_H / 1.7, 50)
       if checkTime(beg_time, pygame.time.get_ticks()):
           screen.blit(text[0], text[1])
       for event in pygame.event.get():
           if event.type == pygame.QUIT:
               sys.exit()
           elif event.type == pygame.MOUSEBUTTONDOWN or pygame.key.get_pressed()[pygame.K_RETURN] != 0:
               screen.blit(text[0], text[1])
               pygame.display.flip()
               pygame.time.wait(1500)
               intro = False

       clock.tick(120)
       pygame.display.flip()

   while play:
       for event in pygame.event.get():
           if event.type == pygame.QUIT:
               sys.exit()

           elif event.type == pygame.KEYDOWN:
               if event.key == pygame.K_ESCAPE:
                   pygame.quit()
                   sys.exit()

       ship_group.update(pill_group)
       pill_group.update()
       score_group.update(ship_left.density, ship_right.density)

       if pill_count < max_pill_count and TIMER % 10 == 0:
           pill_left = Pill(xval_density[pill_count][0], xval_density[pill_count][1])
           pill_right = Pill((WIN_W - xval_density[pill_count][0]), xval_density[pill_count][1])
           pill_group.add(pill_left)
           pill_group.add(pill_right)
           pill_count += 1
           # print(xval_density[pill_count][0], xval_density[pill_count][1])

           # print(pill_count)

       screen.fill(WHITE)
       ship_group.draw(screen)
       pill_group.draw(screen)
       score_group.draw(screen)
       screen.blit(vert_partition, (WIN_W / 2, WIN_H / 15))
       screen.blit(vert_partition_1, (0, WIN_H / 15))

       TIMER += 1

       if ship_left.density >= 250:
           ship_left.density = 250
           sen = "Left Ship wins the round!"
           text = txtRect(sen, 0, 0, 40)
           text = txtRect(sen, WIN_W / 2 - (text[1].width / 2), WIN_H / 4, 50)
           screen.blit(text[0], text[1])
           pygame.display.flip()
           time.sleep(2)
           ship_left.round += 1
           restart(ship_right,ship_left,ship_group,pill_group,screen)

       if ship_right.density >= 250:
           ship_right.density = 250
           sen = "Right Ship wins the round!"
           text = txtRect(sen, 0, 0, 40)
           text = txtRect(sen, WIN_W / 2 - (text[1].width / 2), WIN_H / 4, 50)
           screen.blit(text[0], text[1])
           pygame.display.flip()
           time.sleep(2)
           ship_right.round += 1
           restart(ship_right,ship_left,ship_group,pill_group,screen)

       if ship_left.round == 2 or ship_right.round == 2:
           break

       clock.tick(120)

       pygame.display.flip()

   while outro:
       screen.fill(WHITE)
       if ship_left.round == 2:
           #restart(ship_right,ship_left,ship_group,pill_group,screen)
           sen_1 = "Left Ship Wins!"
       if ship_right.round == 2:
           #restart(ship_right,ship_left,ship_group,pill_group,screen)
           sen_1 = "Right Ship Wins!"

       text = txtRect(sen_1, 0, 0, 40)
       text = txtRect(sen_1, WIN_W / 2 - (text[1].width / 2), WIN_H / 4, 50)
       screen.blit(text[0], text[1])

       text = txtRect("- Click here to continue -", 0, 0, 50)
       text = txtRect("- Click here to continue -", WIN_W / 2 - (text[1].width)/2, WIN_H / 2, 50)
       if checkTime(beg_time, pygame.time.get_ticks()):
           screen.blit(text[0], text[1])
       for event in pygame.event.get():
           if event.type == pygame.QUIT:
               sys.exit()
           elif event.type == pygame.MOUSEBUTTONDOWN or pygame.key.get_pressed()[pygame.K_RETURN] != 0:
               screen.blit(text[0], (WIN_W / 2 - (text[1].width / 2), WIN_H / 1.7))
               pygame.display.flip()
               pygame.time.wait(1500)
               outro = False
               main()

       clock.tick(120)
       pygame.display.flip()

if __name__ == "__main__":
   os.environ['SDL_VIDEO_CENTERED'] = '1'

pygame.init()

main()

